function fillDatabase(db) {

    //Store Imports
    let sql = "INSERT INTO `Supermarket`.`Store` (`StoreID`, `Workinghours`, `Squaremeters`, `Streetname`, `Streetnumber`, `postalCode`, `City`) VALUES "+
    " (1, '8:00 - 21:00', 400, 'Georgiou Zografou', 16, 11527, 'Athina'), " +
    " (2, '8:00 - 21:00', 800, '28 Oktovriou', 5, 10561, 'Athina'), " +
    " (3, '8:00 - 21:00', 300, 'Veikou', 37, 10679, 'Athina'), " +
    " (4, '8:00 - 21:00', 1200, 'Leoforos Vouliagmenis', 89, 16671, 'Athina')," +
    " (5, '8:00 - 21:00', 400, 'Agiou Dimitriou', 21, 56121, 'Thessaloniki'), " +
    " (6, '8:00 - 21:00', 700, 'Monastiriou', 42, 54248, 'Thessaloniki'), " +
    " (7, '8:00 - 21:00', 500, 'Pontou', 17, 54639, 'Thessaloniki'), " +
    " (8, '8:00 - 21:00', 1500, 'Kalavriton', 30, 26331, 'Patra'), " +
    " (9, '8:00 - 21:00', 800, 'Praksitelous', 61, 26226, 'Patra'), " +
    " (10, '8:00 - 21:00', 600, 'Eleftheriou Venizelou', 89, 26224, 'Patra');"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });
    
    //Product_category Imports
    sql = "INSERT INTO `Supermarket`.`product_category`(`Kind`, `Numofproducts`) VALUES " +
    " ('Fresh', 12), " +
    " ('Fridge', 15)," +
    " ('Cellar', 14)," +
    " ('Hygiene', 10)," +
    " ('House', 13)," +
    " ('Pet', 10);"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });
    
    //Product imports
    sql = "INSERT INTO `Supermarket`.`product` (`Barcode`, `Productname`, `Currentprice`, `Kind`) VALUES" +
    " (1234567, 'tomato', 1.39, 'Fresh')," +
    " (2284087, 'lettuce', 2.99, 'Fresh')," +
    " (3034337, 'onion', 1.59, 'Fresh')," +
    " (4434888, 'spinach', 1.95, 'Fresh')," +
    " (5930327, 'orange', 0.86, 'Fresh')," +
    " (6004937, 'lemon', 2.59, 'Fresh')," +
    " (7224321, 'watermelon', 3.19, 'Fresh')," +
    " (8933221, 'blackberries', 8.29, 'Fresh')," +
    " (9934814, 'blueberries', 5.69, 'Fresh')," +
    " (1034800, 'green pepper', 0.89, 'Fresh')," +
    " (1100491, 'apple', 2.39, 'Fresh')," +
    " (1234039, 'banana', 1.19, 'Fresh')," +
    " (1404813, 'cheddar', 8.49, 'Fridge')," +
    " (1534899, 'parmesan', 12.19, 'Fridge')," +
    " (8331811, 'feta', 5.79, 'Fridge')," +
    " (4454818, 'bacon', 6.94, 'Fridge')," +
    " (2504003, 'ham', 5.24, 'Fridge')," +
    " (8764216, 'milk', 1.23, 'Fridge')," +
    " (9974855, 'chocolate milk', 1.52, 'Fridge')," +
    " (3300843, 'orange juice', 0.90, 'Fridge')," +
    " (7492822, 'mixed juice', 1.35, 'Fridge')," +
    " (1684017, 'yogurt', 1.89, 'Fridge')," +
    " (2684044, 'chicken nuggets', 4.40, 'Fridge')," +
    " (6545413, 'beef burgers', 3.65, 'Fridge')," +
    " (1100661, 'eggs', 1.90, 'Fridge')," +
    " (7109988, 'edam', 7.79, 'Fridge')," +
    " (2503313, 'ketchup', 1.40, 'Fridge')," +
    " (7565800, 'dry red wine', 11.70, 'Cellar')," +
    " (6644866, 'dry white wine', 7.30, 'Cellar')," +
    " (5444330, 'semi-sweet red wine', 5.60, 'Cellar')," +
    " (4224481, 'sweet red wine', 4.30, 'Cellar')," +
    " (5554809, 'vodka', 17.80, 'Cellar')," +
    " (3214123, 'premium vodka', 35.00, 'Cellar')," +
    " (8320019, 'white rum', 19.30, 'Cellar')," +
    " (1556880, 'black rum', 18.50, 'Cellar')," +
    " (7776513, 'gin', 16.50, 'Cellar')," +
    " (1107644, 'whiskey', 21.30, 'Cellar')," +
    " (1058796, 'premium whiskey', 46.00, 'Cellar')," +
    " (5654510, 'aged premium whiskey', 98.90, 'Cellar')," +
    " (7652114, 'tequila', 17.80, 'Cellar')," +
    " (6651223, 'cointreau', 14.80, 'Cellar')," +
    " (6619903, 'razors', 3.30, 'Hygiene')," +
    " (3322902, 'toothpaste', 0.90, 'Hygiene')," +
    " (1110942, 'toothbrush', 1.30, 'Hygiene')," +
    " (3554402, 'floss', 0.75, 'Hygiene')," +
    " (3000932, 'sponge', 1.35, 'Hygiene')," +
    " (8424909, 'shower gel', 5.30, 'Hygiene')," +
    " (1223988, 'shampoo', 6.90, 'Hygiene')," +
    " (4554112, 'toilet paper', 1.60, 'Hygiene')," +
    " (6665519, 'nail cutter', 3.23, 'Hygiene')," +
    " (9762112, 'shaving cream', 3.20, 'Hygiene')," +
    " (1446583, 'light bulbs', 3.20, 'House')," +
    " (6654445, 'desk lamp', 13.25, 'House')," +
    " (6665000, 'spoon', 4.98, 'House')," +
    " (5565333, 'fork', 4.20, 'House')," +
    " (6446722, 'knife', 6.73, 'House')," +
    " (1401771, 'desk mirror', 3.80, 'House')," +
    " (2446220, 'coat hanger', 5.44, 'House')," +
    " (5400500, 'ceramic vase', 18.90, 'House')," +
    " (8846003, 'glass bowl', 12.20, 'House')," +
    " (7746704, 'table cloth', 8.26, 'House')," +
    " (3300187, 'frying pan', 8.97, 'House')," +
    " (9625060, 'welcome mat', 7.13, 'House')," +
    " (5522013, 'water glasses', 11.20, 'House')," +
    " (5545001, 'cat food', 3.20, 'Pet')," +
    " (9595624, 'dog food', 4.50, 'Pet')," +
    " (1913300, 'bird food', 2.80, 'Pet')," +
    " (3215001, 'bird cage', 18.00, 'Pet')," +
    " (8884241, 'cat toys', 4.60, 'Pet')," +
    " (9905034, 'dog toys', 6.10, 'Pet')," +
    " (3335821, 'cat pillow', 9.10, 'Pet')," +
    " (9931091, 'dog pillow', 3.20, 'Pet')," +
    " (5546677, 'food bowl small', 2.60, 'Pet')," +
    " (5876012, 'food bowl large', 4.30, 'Pet');"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });

    //Price_history Imports
    sql = "INSERT INTO `Supermarket`.`Price_history` (`Endingdate`, `Oldprice`, `Barcode`) VALUES" +
    " ('2017-05-30', 1.30, 1234567)," +
    " ('2019-09-20', 8.55, 8933221)," +
    " ('2019-09-20', 0.82, 5930327)," +
    " ('2017-05-10', 0.89, 5930327)," +
    " ('2018-09-22', 23.10, 8320019)," +
    " ('2020-03-15', 1.29, 8764216)," +
    " ('2020-04-15', 1.34, 8764216)," +
    " ('2019-09-20', 6.97, 3300187)," +
    " ('2019-09-10', 8.99, 3300187)," +
    " ('2019-09-30', 7.99, 3300187);"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });

    //Customer Imports
    sql = "INSERT INTO `Supermarket`.`customer` (`Bonuspoints`, `Numberofchildren`,`Fullname`,`Maritalstatus`,`StoreID`,`BirthDate`) VALUES" +
    "(500, 0, 'Dimitrios Avramopoulos', 'Single', 1, '1991-05-30')," +
    "(900, 3, 'Xristos Nikiforopoulos', 'Married', 1, '1981-07-20')," +
    "(200, 6, 'Vasilis Spanoulis', 'Married', 2, '1983-05-12')," +
    "(100, 0, 'Maria Papadopoulou', 'Single', 3, '1963-01-17')," +
    "(500, 2, 'Niki Efstathiou', 'Single', 3, '1970-09-22')," +
    "(6000, 6, 'Olympia Xopsonidou', 'Married', 2, '1986-08-31')," +
    "(10, 0, 'Nikos Iatridis', 'Single', 4, '1993-01-01')," +
    "(900, 0, 'Petros Minasidis', 'Single', 5, '1998-11-12')," +
    "(1100, 0, 'Ioanna Xaimantou', 'Single', 6, '1953-02-11')," +
    "(2000, 1, 'Andronikos Aggelidis', 'Married', 7, '1949-08-25')," +
    "(300, 0, 'Nikos Adamidis', 'Single', 8, '2001-03-29')," +
    "(900, 0, 'Kostantinos Pantelidis', 'Single', 9, '1989-12-12')," +
    "(1300, 3, 'Dimitrios Koutsogiannis', 'Married', 10, '1989-06-18');"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });

    //Customer_transaction Imports
    sql = "INSERT INTO `Supermarket`.`Customer_transaction` (`Totalcost`, `Time`, `Date`, `Methodofpayment`, `Numofproducts`, `CardID`, `StoreID`) VALUES" +
    "(16.75, '17:45', '2020-05-19', 'Cash', 5, NULL, 1)," +
    "(3.90, '08:49', '2020-05-09', 'Cash', 2, NULL, 1)," +
    "(9.40, '14:45', '2020-05-25', 'Card', 3, 1, 1)," +
    "(29.43, '16:45', '2020-05-13', 'Card', 10, 2, 1)," +
    "(29.43, '16:46', '2020-05-19', 'Card', 10, 3, 1)," +
    "(20.4, '10:47', '2020-02-13', 'Card', 3, 4, 4)," +
    "(29.43, '16:48', '2020-01-16', 'Card', 10, 5, 5)," +
    "(41.45, '09:49', '2020-05-22', 'Card', 4, 6, 6)," +
    "(17.13, '16:50', '2020-05-13', 'Card', 4, 7, 7)," +
    "(29.43, '16:52', '2020-05-10', 'Card', 10, 8, 8)," +
    "(29.43, '17:53', '2020-05-13', 'Card', 4, 9, 9)," +
    "(41.45, '11:54', '2020-05-13', 'Card', 4, 10, 10)," +
    "(3.90, '18:49', '2020-05-09', 'Cash', 2, 1, 1)," +
    "(3.90, '12:49', '2020-05-29', 'Cash', 2, 1, 1)," +
    "(3.90, '14:55', '2020-04-27', 'Cash', 2, 1, 1)," +
    "(3.90, '13:55', '2019-04-10', 'Cash', 2, 1, 1)," +
    "(41.45, '18:45', '2020-03-14', 'Card', 4, 1, 2)," +
    "(17.13, '11:35', '2020-02-14', 'Card', 4, 1, 3)," +
    "(43.46, '16:46', '2020-05-19', 'Card', 8, 1, 1)," +
    "(43.46, '10:46', '2020-03-19', 'Card', 8, 11, 1)," +
    "(43.46, '19:46', '2020-01-19', 'Card', 8, 12, 1)," +
    "(43.46, '20:46', '2020-02-19', 'Card', 8, 13, 1)," +
    "(48.86, '10:45', '2020-05-13', 'Cash', 20, 2, 1);"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });

    //Kinds_in_store Imports
    sql = "INSERT INTO `Supermarket`.`Kinds_in_store` (`StoreID`, `Kind`) VALUES" +
    "(1, 'Fridge')," +
    "(1, 'Fresh')," +
    "(2, 'Cellar')," +
    "(2, 'House')," +
    "(3, 'Hygiene')," +
    "(3, 'Pet')," +
    "(4, 'Fridge')," +
    "(4, 'Cellar')," +
    "(5, 'Fridge')," +
    "(5, 'Fresh')," +
    "(6, 'Cellar')," +
    "(6, 'House')," +
    "(7, 'Hygiene')," +
    "(7, 'Pet')," +
    "(8, 'Fridge')," +
    "(8, 'Fresh')," +
    "(9, 'Cellar')," +
    "(9, 'House')," +
    "(10, 'Hygiene')," +
    "(10, 'Pet');"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });

    //Products_in_store Imports
    sql = "INSERT INTO `Supermarket`.`products_in_store` (`StoreID`, `Barcode`, `Label` , `Aisle`, `Shelf`) VALUES" +
    " (1, 1234567, TRUE, 1, 1)," +
    " (1, 2284087, TRUE, 1, 1)," +
    " (1, 3034337, FALSE, 1, 2)," +
    " (1, 4434888, TRUE, 1, 2)," +
    " (1, 5930327, TRUE, 1, 3)," +
    " (1, 6004937, FALSE, 1, 3)," +
    " (1, 7224321, FALSE, 1, 4)," +
    " (1, 8933221, FALSE, 1, 4)," +
    " (1, 9934814, FALSE, 1, 5)," +
    " (1, 1034800, FALSE, 1, 5)," +
    " (1, 1100491, TRUE, 1, 6)," +
    " (1, 1234039, FALSE, 1, 6)," +
    " (1, 1404813, FALSE, 2, 1)," +
    " (1, 1534899, FALSE, 2, 1)," +
    " (1, 8331811, TRUE, 2, 1)," +
    " (1, 4454818, FALSE, 2, 2)," +
    " (1, 2504003, FALSE, 2, 2)," +
    " (1, 8764216, FALSE, 3, 1)," +
    " (1, 9974855, FALSE, 3, 1)," +
    " (1, 3300843, TRUE, 3, 2)," +
    " (1, 7492822, FALSE, 3, 2)," +
    " (1, 1684017, FALSE, 3, 2)," +
    " (1, 2684044, FALSE, 3, 3)," +
    " (1, 6545413, FALSE, 3, 3)," +
    " (1, 1100661, TRUE, 3, 4)," +
    " (1, 7109988, FALSE, 2, 1)," +
    " (1, 2503313, TRUE, 3, 3)," +
    " (2, 7565800, TRUE, 1, 1)," +
    " (2, 6644866, FALSE, 1, 1)," +
    " (2, 5444330, FALSE, 1, 2)," +
    " (2, 4224481, TRUE, 1, 2)," +
    " (2, 5554809, FALSE, 1, 3)," +
    " (2, 3214123, FALSE, 1, 3)," +
    " (2, 8320019, FALSE, 1, 4)," +
    " (2, 1556880, FALSE, 1, 4)," +
    " (2, 7776513, FALSE, 1, 5)," +
    " (2, 1107644, FALSE, 1, 5)," +
    " (2, 1058796, FALSE, 1, 6)," +
    " (2, 5654510, FALSE, 1, 6)," +
    " (2, 7652114, FALSE, 1, 5)," +
    " (2, 6651223, FALSE, 1, 6)," +
    " (2, 1446583, FALSE, 2, 1)," +
    " (2, 6654445, FALSE, 2, 1)," +
    " (2, 6665000, TRUE, 2, 2)," +
    " (2, 5565333, TRUE, 2, 2)," +
    " (2, 6446722, TRUE, 3, 1)," +
    " (2, 1401771, FALSE, 3, 1)," +
    " (2, 2446220, FALSE, 3, 2)," +
    " (2, 5400500, FALSE, 3, 2)," +
    " (2, 8846003, FALSE, 4, 1)," +
    " (2, 7746704, TRUE, 4, 1)," +
    " (2, 3300187, TRUE, 4, 1)," +
    " (2, 9625060, TRUE, 4, 2)," +
    " (2, 5522013, TRUE, 4, 2)," +
    " (3, 6619903, FALSE, 1, 1)," +
    " (3, 3322902, FALSE, 1, 1)," +
    " (3, 1110942, TRUE, 1, 2)," +
    " (3, 3554402, TRUE, 1, 2)," +
    " (3, 3000932, FALSE, 1, 3)," +
    " (3, 8424909, FALSE, 2, 1)," +
    " (3, 1223988, FALSE, 2, 1)," +
    " (3, 4554112, TRUE, 2, 2)," +
    " (3, 6665519, TRUE, 2, 2)," +
    " (3, 9762112, FALSE, 2, 3)," +
    " (3, 5545001, TRUE, 3, 1)," +
    " (3, 9595624, TRUE, 3, 1)," +
    " (3, 1913300, FALSE, 3, 2)," +
    " (3, 3215001, FALSE, 3, 2)," +
    " (3, 8884241, TRUE, 3, 3)," +
    " (3, 9905034, TRUE, 4, 1)," +
    " (3, 3335821, FALSE, 4, 1)," +
    " (3, 9931091, FALSE, 4, 2)," +
    " (3, 5546677, TRUE, 4, 2)," +
    " (3, 5876012, TRUE, 4, 3)," +
    " (4, 7565800, TRUE, 1, 1)," +
    " (4, 6644866, FALSE, 1, 1)," +
    " (4, 5444330, FALSE, 1, 2)," +
    " (4, 4224481, TRUE, 1, 2)," +
    " (4, 5554809, FALSE, 1, 3)," +
    " (4, 3214123, FALSE, 1, 3)," +
    " (4, 8320019, FALSE, 1, 4)," +
    " (4, 1556880, FALSE, 1, 4)," +
    " (4, 7776513, FALSE, 1, 5)," +
    " (4, 1107644, FALSE, 1, 5)," +
    " (4, 1058796, FALSE, 1, 6)," +
    " (4, 5654510, FALSE, 1, 6)," +
    " (4, 7652114, FALSE, 1, 5)," +
    " (4, 6651223, FALSE, 1, 6)," +
    " (4, 1404813, FALSE, 2, 1)," +
    " (4, 1534899, FALSE, 2, 1)," +
    " (4, 8331811, TRUE, 2, 1)," +
    " (4, 4454818, FALSE, 2, 2)," +
    " (4, 2504003, FALSE, 2, 2)," +
    " (4, 8764216, FALSE, 3, 1)," +
    " (4, 9974855, FALSE, 3, 1)," +
    " (4, 3300843, TRUE, 3, 2)," +
    " (4, 7492822, FALSE, 3, 2)," +
    " (4, 1684017, FALSE, 3, 2)," +
    " (4, 2684044, FALSE, 3, 3)," +
    " (4, 6545413, FALSE, 3, 3)," +
    " (4, 1100661, TRUE, 3, 4)," +
    " (4, 7109988, FALSE, 2, 1)," +
    " (4, 2503313, TRUE, 3, 3)," +
    " (5, 1234567, TRUE, 1, 1)," +
    " (5, 2284087, TRUE, 1, 1)," +
    " (5, 3034337, FALSE, 1, 2)," +
    " (5, 4434888, TRUE, 1, 2)," +
    " (5, 5930327, TRUE, 1, 3)," +
    " (5, 6004937, FALSE, 1, 3)," +
    " (5, 7224321, FALSE, 1, 4)," +
    " (5, 8933221, FALSE, 1, 4)," +
    " (5, 9934814, FALSE, 1, 5)," +
    " (5, 1034800, FALSE, 1, 5)," +
    " (5, 1100491, TRUE, 1, 6)," +
    " (5, 1234039, FALSE, 1, 6)," +
    " (5, 1404813, FALSE, 2, 1)," +
    " (5, 1534899, FALSE, 2, 1)," +
    " (5, 8331811, TRUE, 2, 1)," +
    " (5, 4454818, FALSE, 2, 2)," +
    " (5, 2504003, FALSE, 2, 2)," +
    " (5, 8764216, FALSE, 3, 1)," +
    " (5, 9974855, FALSE, 3, 1)," +
    " (5, 3300843, TRUE, 3, 2)," +
    " (5, 7492822, FALSE, 3, 2)," +
    " (5, 1684017, FALSE, 3, 2)," +
    " (5, 2684044, FALSE, 3, 3)," +
    " (5, 6545413, FALSE, 3, 3)," +
    " (5, 1100661, TRUE, 3, 4)," +
    " (5, 7109988, FALSE, 2, 1)," +
    " (5, 2503313, TRUE, 3, 3)," +
    " (6, 7565800, TRUE, 1, 1)," +
    " (6, 6644866, FALSE, 1, 1)," +
    " (6, 5444330, FALSE, 1, 2)," +
    " (6, 4224481, TRUE, 1, 2)," +
    " (6, 5554809, FALSE, 1, 3)," +
    " (6, 3214123, FALSE, 1, 3)," +
    " (6, 8320019, FALSE, 1, 4)," +
    " (6, 1556880, FALSE, 1, 4)," +
    " (6, 7776513, FALSE, 1, 5)," +
    " (6, 1107644, FALSE, 1, 5)," +
    " (6, 1058796, FALSE, 1, 6)," +
    " (6, 5654510, FALSE, 1, 6)," +
    " (6, 7652114, FALSE, 1, 5)," +
    " (6, 6651223, FALSE, 1, 6)," +
    " (6, 1446583, FALSE, 2, 1)," +
    " (6, 6654445, FALSE, 2, 1)," +
    " (6, 6665000, TRUE, 2, 2)," +
    " (6, 5565333, TRUE, 2, 2)," +
    " (6, 6446722, TRUE, 3, 1)," +
    " (6, 1401771, FALSE, 3, 1)," +
    " (6, 2446220, FALSE, 3, 2)," +
    " (6, 5400500, FALSE, 3, 2)," +
    " (6, 8846003, FALSE, 4, 1)," +
    " (6, 7746704, TRUE, 4, 1)," +
    " (6, 3300187, TRUE, 4, 1)," +
    " (6, 9625060, TRUE, 4, 2)," +
    " (6, 5522013, TRUE, 4, 2)," +
    " (7, 6619903, FALSE, 1, 1)," +
    " (7, 3322902, FALSE, 1, 1)," +
    " (7, 1110942, TRUE, 1, 2)," +
    " (7, 3554402, TRUE, 1, 2)," +
    " (7, 3000932, FALSE, 1, 3)," +
    " (7, 8424909, FALSE, 2, 1)," +
    " (7, 1223988, FALSE, 2, 1)," +
    " (7, 4554112, TRUE, 2, 2)," +
    " (7, 6665519, TRUE, 2, 2)," +
    " (7, 9762112, FALSE, 2, 3)," +
    " (7, 5545001, TRUE, 3, 1)," +
    " (7, 9595624, TRUE, 3, 1)," +
    " (7, 1913300, FALSE, 3, 2)," +
    " (7, 3215001, FALSE, 3, 2)," +
    " (7, 8884241, TRUE, 3, 3)," +
    " (7, 9905034, TRUE, 4, 1)," +
    " (7, 3335821, FALSE, 4, 1)," +
    " (7, 9931091, FALSE, 4, 2)," +
    " (7, 5546677, TRUE, 4, 2)," +
    " (7, 5876012, TRUE, 4, 3)," +
    " (8, 1234567, TRUE, 1, 1)," +
    " (8, 2284087, TRUE, 1, 1)," +
    " (8, 3034337, FALSE, 1, 2)," +
    " (8, 4434888, TRUE, 1, 2)," +
    " (8, 5930327, TRUE, 1, 3)," +
    " (8, 6004937, FALSE, 1, 3)," +
    " (8, 7224321, FALSE, 1, 4)," +
    " (8, 8933221, FALSE, 1, 4)," +
    " (8, 9934814, FALSE, 1, 5)," +
    " (8, 1034800, FALSE, 1, 5)," +
    " (8, 1100491, TRUE, 1, 6)," +
    " (8, 1234039, FALSE, 1, 6)," +
    " (8, 1404813, FALSE, 2, 1)," +
    " (8, 1534899, FALSE, 2, 1)," +
    " (8, 8331811, TRUE, 2, 1)," +
    " (8, 4454818, FALSE, 2, 2)," +
    " (8, 2504003, FALSE, 2, 2)," +
    " (8, 8764216, FALSE, 3, 1)," +
    " (8, 9974855, FALSE, 3, 1)," +
    " (8, 3300843, TRUE, 3, 2)," +
    " (8, 7492822, FALSE, 3, 2)," +
    " (8, 1684017, FALSE, 3, 2)," +
    " (8, 2684044, FALSE, 3, 3)," +
    " (8, 6545413, FALSE, 3, 3)," +
    " (8, 1100661, TRUE, 3, 4)," +
    " (8, 7109988, FALSE, 2, 1)," +
    " (8, 2503313, TRUE, 3, 3)," +
    " (9, 7565800, TRUE, 1, 1)," +
    " (9, 6644866, FALSE, 1, 1)," +
    " (9, 5444330, FALSE, 1, 2)," +
    " (9, 4224481, TRUE, 1, 2)," +
    " (9, 5554809, FALSE, 1, 3)," +
    " (9, 3214123, FALSE, 1, 3)," +
    " (9, 8320019, FALSE, 1, 4)," +
    " (9, 1556880, FALSE, 1, 4)," +
    " (9, 7776513, FALSE, 1, 5)," +
    " (9, 1107644, FALSE, 1, 5)," +
    " (9, 1058796, FALSE, 1, 6)," +
    " (9, 5654510, FALSE, 1, 6)," +
    " (9, 7652114, FALSE, 1, 5)," +
    " (9, 6651223, FALSE, 1, 6)," +
    " (9, 1446583, FALSE, 2, 1)," +
    " (9, 6654445, FALSE, 2, 1)," +
    " (9, 6665000, TRUE, 2, 2)," +
    " (9, 5565333, TRUE, 2, 2)," +
    " (9, 6446722, TRUE, 3, 1)," +
    " (9, 1401771, FALSE, 3, 1)," +
    " (9, 2446220, FALSE, 3, 2)," +
    " (9, 5400500, FALSE, 3, 2)," +
    " (9, 8846003, FALSE, 4, 1)," +
    " (9, 7746704, TRUE, 4, 1)," +
    " (9, 3300187, TRUE, 4, 1)," +
    " (9, 9625060, TRUE, 4, 2)," +
    " (9, 5522013, TRUE, 4, 2)," +
    " (10, 6619903, FALSE, 1, 1)," +
    " (10, 3322902, FALSE, 1, 1)," +
    " (10, 1110942, TRUE, 1, 2)," +
    " (10, 3554402, TRUE, 1, 2)," +
    " (10, 3000932, FALSE, 1, 3)," +
    " (10, 8424909, FALSE, 2, 1)," +
    " (10, 1223988, FALSE, 2, 1)," +
    " (10, 4554112, TRUE, 2, 2)," +
    " (10, 6665519, TRUE, 2, 2)," +
    " (10, 9762112, FALSE, 2, 3)," +
    " (10, 5545001, TRUE, 3, 1)," +
    " (10, 9595624, TRUE, 3, 1)," +
    " (10, 1913300, FALSE, 3, 2)," +
    " (10, 3215001, FALSE, 3, 2)," +
    " (10, 8884241, TRUE, 3, 3)," +
    " (10, 9905034, TRUE, 4, 1)," +
    " (10, 3335821, FALSE, 4, 1)," +
    " (10, 9931091, FALSE, 4, 2)," +
    " (10, 5546677, TRUE, 4, 2)," +
    " (10, 5876012, TRUE, 4, 3)" +
    ";"
    db.query(sql,(err,results)=>{
        if (err) throw err;
    });

    //Product_bought_by
    sql = "INSERT INTO `Supermarket`.`product_bought_by` (`TransactionID`, `Barcode`, `CardID`, `Amount`) VALUES" +
    "(1, 5930327, NULL, 1)," +
    "(1, 3300843, NULL, 3)," +
    "(1, 1534899, NULL, 1)," +
    "(2, 4434888, NULL, 2)," +
    "(3, 4454818, 1, 1)," +
    "(3, 8764216, 1, 2)," +
    "(4, 1234567, 2, 1)," +
    "(4, 2284087, 2, 1)," +
    "(4, 3034337, 2, 1)," +
    "(4, 4434888, 2, 1)," +
    "(4, 5930327, 2, 1)," +
    "(4, 6004937, 2, 1)," +
    "(4, 7224321, 2, 1)," +
    "(4, 8933221, 2, 1)," +
    "(4, 9934814, 2, 1)," +
    "(4, 1034800, 2, 1)," +
    "(5, 1234567, 3, 1)," +
    "(5, 2284087, 3, 1)," +
    "(5, 3034337, 3, 1)," +
    "(5, 4434888, 3, 1)," +
    "(5, 5930327, 3, 1)," +
    "(5, 6004937, 3, 1)," +
    "(5, 7224321, 3, 1)," +
    "(5, 8933221, 3, 1)," +
    "(5, 9934814, 3, 1)," +
    "(5, 1034800, 3, 1)," +
    "(6, 2503313, 4, 1)," +
    "(6, 7565800, 4, 1)," +
    "(6, 6644866, 4, 1)," +
    "(7, 1234567, 5, 1)," +
    "(7, 2284087, 5, 1)," +
    "(7, 3034337, 5, 1)," +
    "(7, 4434888, 5, 1)," +
    "(7, 5930327, 5, 1)," +
    "(7, 6004937, 5, 1)," +
    "(7, 7224321, 5, 1)," +
    "(7, 8933221, 5, 1)," +
    "(7, 9934814, 5, 1)," +
    "(7, 1034800, 5, 1)," +
    "(8, 7565800, 6, 1)," +
    "(8, 6644866, 6, 1)," +
    "(8, 1446583, 6, 1)," +
    "(8, 6654445, 6, 1)," +
    "(9, 8884241, 7, 1)," +
    "(9, 9905034, 7, 1)," +
    "(9, 6665519, 7, 1)," +
    "(9, 9762112, 7, 1)," +
    "(10, 1234567, 8, 1)," +
    "(10, 2284087, 8, 1)," +
    "(10, 3034337, 8, 1)," +
    "(10, 4434888, 8, 1)," +
    "(10, 5930327, 8, 1)," +
    "(10, 6004937, 8, 1)," +
    "(10, 7224321, 8, 1)," +
    "(10, 8933221, 8, 1)," +
    "(10, 9934814, 8, 1)," +
    "(10, 1034800, 8, 1)," +
    "(11, 7565800, 9, 1)," +
    "(11, 6644866, 9, 1)," +
    "(11, 1446583, 9, 1)," +
    "(11, 6654445, 9, 1)," +
    "(12, 8884241, 10, 1)," +
    "(12, 9905034, 10, 1)," +
    "(12, 6665519, 10, 1)," +
    "(12, 9762112, 10, 1)," +
    "(13, 4434888, 1, 2)," +
    "(14, 4434888, 1, 2)," +
    "(15, 4434888, 1, 2)," +
    "(16, 4434888, 1, 2)," +
    "(17, 7565800, 1, 1)," +
    "(17, 6644866, 1, 1)," +
    "(17, 1446583, 1, 1)," +
    "(17, 6654445, 1, 1)," +
    "(18, 8884241, 1, 1)," +
    "(18, 9905034, 1, 1)," +
    "(18, 6665519, 1, 1)," +
    "(18, 9762112, 1, 1)," +
    "(19, 1100491, 1, 1)," +
    "(19, 1234039, 1, 1)," +
    "(19, 1404813, 1, 1)," +
    "(19, 1534899, 1, 1)," +
    "(19, 8331811, 1, 1)," +
    "(19, 4454818, 1, 1)," +
    "(19, 2504003, 1, 1)," +
    "(19, 8764216, 1, 1)," +
    "(20, 1100491, 11, 1)," +
    "(20, 1234039, 11, 1)," +
    "(20, 1404813, 11, 1)," +
    "(20, 1534899, 11, 1)," +
    "(20, 8331811, 11, 1)," +
    "(20, 4454818, 11, 1)," +
    "(20, 2504003, 11, 1)," +
    "(20, 8764216, 11, 1)," +
    "(21, 1100491, 12, 1)," +
    "(21, 1234039, 12, 1)," +
    "(21, 1404813, 12, 1)," +
    "(21, 1534899, 12, 1)," +
    "(21, 8331811, 12, 1)," +
    "(21, 4454818, 12, 1)," +
    "(21, 2504003, 12, 1)," +
    "(21, 8764216, 12, 1)," +
    "(22, 1100491, 13, 1)," +
    "(22, 1234039, 13, 1)," +
    "(22, 1404813, 13, 1)," +
    "(22, 1534899, 13, 1)," +
    "(22, 8331811, 13, 1)," +
    "(22, 4454818, 13, 1)," +
    "(22, 2504003, 13, 1)," +
    "(22, 8764216, 13, 1)," +
    "(23, 1234567, 1, 2)," +
    "(23, 2284087, 1, 2)," +
    "(23, 3034337, 1, 2)," +
    "(23, 4434888, 1, 2)," +
    "(23, 5930327, 1, 2)," +
    "(23, 6004937, 1, 2)," +
    "(23, 7224321, 1, 2)," +
    "(23, 8933221, 1, 2)," +
    "(23, 9934814, 1, 2)," +
    "(23, 1034800, 1, 2)" +
    ";"
    db.query(sql,(err,results)=>{
        if (err) throw err;
        console.log("Database filled");
    });

}


module.exports.fillDatabase = fillDatabase;